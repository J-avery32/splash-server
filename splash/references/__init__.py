from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, constr
from datetime import datetime


class NewReference(BaseModel):
    # generated by datamodel-codegen:
    #   filename:  csl-data.json
    #   timestamp: 2020-11-28T00:56:59+00:00

    # This model was autogenerated based off of the
    # CSL JSON schema, which can be found in this repo
    # https://github.com/citation-style-language/schema

    # Disclaimer: type and id are actually required by
    # the original JSON schema. Should they be optional
    # In our database?
    type: Optional[Type] = None
    id: Optional[Union[str, float]] = None

    citation_key: Optional[str] = Field(None, alias='citation-key')
    categories: Optional[List[str]] = None
    language: Optional[str] = None
    journalAbbreviation: Optional[str] = None
    shortTitle: Optional[str] = None
    author: Optional[List[NameVariableItem]] = None
    chair: Optional[List[NameVariableItem]] = None
    collection_editor: Optional[List[NameVariableItem]] = Field(
        None, alias='collection-editor'
    )
    compiler: Optional[List[NameVariableItem]] = None
    composer: Optional[List[NameVariableItem]] = None
    container_author: Optional[List[NameVariableItem]] = Field(
        None, alias='container-author'
    )
    contributor: Optional[List[NameVariableItem]] = None
    curator: Optional[List[NameVariableItem]] = None
    director: Optional[List[NameVariableItem]] = None
    editor: Optional[List[NameVariableItem]] = None
    editorial_director: Optional[List[NameVariableItem]] = Field(
        None, alias='editorial-director'
    )
    executive_producer: Optional[List[NameVariableItem]] = Field(
        None, alias='executive-producer'
    )
    guest: Optional[List[NameVariableItem]] = None
    host: Optional[List[NameVariableItem]] = None
    interviewer: Optional[List[NameVariableItem]] = None
    illustrator: Optional[List[NameVariableItem]] = None
    narrator: Optional[List[NameVariableItem]] = None
    organizer: Optional[List[NameVariableItem]] = None
    original_author: Optional[List[NameVariableItem]] = Field(None, alias='original-author')
    performer: Optional[List[NameVariableItem]] = None
    producer: Optional[List[NameVariableItem]] = None
    recipient: Optional[List[NameVariableItem]] = None
    reviewed_author: Optional[List[NameVariableItem]] = Field(None, alias='reviewed-author')
    script_writer: Optional[List[NameVariableItem]] = Field(None, alias='script-writer')
    series_creator: Optional[List[NameVariableItem]] = Field(None, alias='series-creator')
    translator: Optional[List[NameVariableItem]] = None
    accessed: Optional[Union[EdtfDatatype, DateVariableItem]] = None
    available_date: Optional[Union[EdtfDatatype, DateVariableItem]] = Field(None, alias='available-date')
    event_date: Optional[Union[EdtfDatatype, DateVariableItem]] = Field(None, alias='event-date')
    issued: Optional[Union[EdtfDatatype, DateVariableItem]] = None
    original_date: Optional[Union[EdtfDatatype, DateVariableItem]] = Field(None, alias='original-date')
    submitted: Optional[Union[EdtfDatatype, DateVariableItem]] = None
    abstract: Optional[str] = None
    annote: Optional[str] = None
    archive: Optional[str] = None
    archive_collection: Optional[str] = None
    archive_location: Optional[str] = None
    archive_place: Optional[str] = Field(None, alias='archive-place')
    authority: Optional[str] = None
    call_number: Optional[str] = Field(None, alias='call-number')
    chapter_number: Optional[Union[str, float]] = Field(None, alias='chapter-number')
    citation_number: Optional[Union[str, float]] = Field(None, alias='citation-number')
    citation_label: Optional[str] = Field(None, alias='citation-label')
    collection_number: Optional[Union[str, float]] = Field(
        None, alias='collection-number'
    )
    collection_title: Optional[str] = Field(None, alias='collection-title')
    container_title: Optional[str] = Field(None, alias='container-title')
    container_title_short: Optional[str] = Field(None, alias='container-title-short')
    dimensions: Optional[str] = None
    division: Optional[str] = None
    DOI: str
    edition: Optional[Union[str, float]] = None
    event: Optional[str] = Field(
        None,
        description="[Deprecated - use 'event-title' instead. Will be removed in 1.1]",
    )
    event_title: Optional[str] = Field(None, alias='event-title')
    event_place: Optional[str] = Field(None, alias='event-place')
    first_reference_note_number: Optional[Union[str, float]] = Field(
        None, alias='first-reference-note-number'
    )
    genre: Optional[str] = None
    ISBN: Optional[str] = None
    ISSN: Optional[str] = None
    issue: Optional[Union[str, float]] = None
    jurisdiction: Optional[str] = None
    keyword: Optional[str] = None
    locator: Optional[Union[str, float]] = None
    medium: Optional[str] = None
    note: Optional[str] = None
    number: Optional[Union[str, float]] = None
    number_of_pages: Optional[Union[str, float]] = Field(None, alias='number-of-pages')
    number_of_volumes: Optional[Union[str, float]] = Field(
        None, alias='number-of-volumes'
    )
    original_publisher: Optional[str] = Field(None, alias='original-publisher')
    original_publisher_place: Optional[str] = Field(
        None, alias='original-publisher-place'
    )
    original_title: Optional[str] = Field(None, alias='original-title')
    page: Optional[Union[str, float]] = None
    page_first: Optional[Union[str, float]] = Field(None, alias='page-first')
    part: Optional[Union[str, float]] = None
    part_title: Optional[str] = Field(None, alias='part-title')
    PMCID: Optional[str] = None
    PMID: Optional[str] = None
    printing: Optional[Union[str, float]] = None
    publisher: Optional[str] = None
    publisher_place: Optional[str] = Field(None, alias='publisher-place')
    references: Optional[str] = None
    reviewed_genre: Optional[str] = Field(None, alias='reviewed-genre')
    reviewed_title: Optional[str] = Field(None, alias='reviewed-title')
    scale: Optional[str] = None
    section: Optional[str] = None
    source: Optional[str] = None
    status: Optional[str] = None
    supplement: Optional[Union[str, float]] = None
    title: Optional[str] = None
    title_short: Optional[str] = Field(None, alias='title-short')
    URL: Optional[str] = None
    version: Optional[str] = None
    volume: Optional[Union[str, float]] = None
    volume_title: Optional[str] = Field(None, alias='volume-title')
    volume_title_short: Optional[str] = Field(None, alias='volume-title-short')
    year_suffix: Optional[str] = Field(None, alias='year-suffix')
    custom: Optional[Dict[str, Any]] = Field(
        None,
        description='Used to store additional information that does not have a designated CSL JSON field. The custom field is preferred over the note field for storing custom data, particularly for storing key-value pairs, as the note field is used for user annotations in annotated bibliography styles.',
        examples=[
            {'short_id': 'xyz', 'other-ids': ['alternative-id']},
            {'metadata-double-checked': True},
        ],
        title='Custom key-value pairs.',
    )


class Reference(NewReference):
    uid: str
    date_user_created: datetime
    user_uid: str


class CreateReferenceResponse(BaseModel):
    uid: str


class Type(Enum):
    article = 'article'
    article_journal = 'article-journal'
    article_magazine = 'article-magazine'
    article_newspaper = 'article-newspaper'
    bill = 'bill'
    book = 'book'
    broadcast = 'broadcast'
    chapter = 'chapter'
    classic = 'classic'
    collection = 'collection'
    dataset = 'dataset'
    document = 'document'
    entry = 'entry'
    entry_dictionary = 'entry-dictionary'
    entry_encyclopedia = 'entry-encyclopedia'
    event = 'event'
    figure = 'figure'
    graphic = 'graphic'
    hearing = 'hearing'
    interview = 'interview'
    legal_case = 'legal_case'
    legislation = 'legislation'
    manuscript = 'manuscript'
    map = 'map'
    motion_picture = 'motion_picture'
    musical_score = 'musical_score'
    pamphlet = 'pamphlet'
    paper_conference = 'paper-conference'
    patent = 'patent'
    performance = 'performance'
    periodical = 'periodical'
    personal_communication = 'personal_communication'
    post = 'post'
    post_weblog = 'post-weblog'
    regulation = 'regulation'
    report = 'report'
    review = 'review'
    review_book = 'review-book'
    software = 'software'
    song = 'song'
    speech = 'speech'
    standard = 'standard'
    thesis = 'thesis'
    treaty = 'treaty'
    webpage = 'webpage'


class NameVariableItem(BaseModel):
    family: Optional[str] = None
    given: Optional[str] = None
    dropping_particle: Optional[str] = Field(None, alias='dropping-particle')
    non_dropping_particle: Optional[str] = Field(None, alias='non-dropping-particle')
    suffix: Optional[str] = None
    comma_suffix: Optional[Union[str, float, bool]] = Field(None, alias='comma-suffix')
    static_ordering: Optional[Union[str, float, bool]] = Field(
        None, alias='static-ordering'
    )
    literal: Optional[str] = None
    parse_names: Optional[Union[str, float, bool]] = Field(None, alias='parse-names')


#class NameVariable(BaseModel):
#    __root__: NameVariableItem


EdtfDatatype = constr(regex='^[0-9-%~X?./]{4,}$')

# EdtfDatatype(BaseModel):
    # __root__ = constr(regex='^[0-9-%~X?./]{4,}$')

#class DatePart(BaseModel):
#    __root__: List[Any]


class DateVariableItem(BaseModel):
    date_parts: Optional[List[List[Any]]] = Field(
        None, alias='date-parts', max_items=2, min_items=1
    )
    season: Optional[Union[str, float]] = None
    circa: Optional[Union[str, float, bool]] = None
    literal: Optional[str] = None
    raw: Optional[str] = None
    edtf: Optional[EdtfDatatype] = None


#class DateVariable(BaseModel):
#    __root__: Union[EdtfDatatype, DateVariableItem]


# class Model(BaseModel):
#    __root__: List[ModelItem] = Field(..., description='JSON schema for CSL input data')

NewReference.update_forward_refs()
Reference.update_forward_refs()